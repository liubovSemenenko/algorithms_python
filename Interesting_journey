from collections import deque

# Функция для вычисления расстояния между двумя городами
def distance(city1, city2):
    return abs(city1[0] - city2[0]) + abs(city1[1] - city2[1])

# Чтение входных данных
n = int(input())
cities = [tuple(map(int, input().split())) for _ in range(n)]
k = int(input())
start, end = map(int, input().split())

# Создаем граф с ребрами между городами, расстояние между которыми не превышает k
graph = [[] for _ in range(n)]
for i in range(n):
    for j in range(i + 1, n):
        if distance(cities[i], cities[j]) <= k:
            graph[i].append(j)
        if distance(cities[j], cities[i]) <= k:
            graph[j].append(i)

# Функция поиска в ширину
def bfs(graph, start, end):
    visited = [False] * n
    queue = deque([(start, 0)])
    visited[start] = True

    while queue:
        current, steps = queue.popleft()
        if current == end:
            return steps
        for neighbor in graph[current]:
            if not visited[neighbor]:
                visited[neighbor] = True
                queue.append((neighbor, steps + 1))

# Выполняем поиск в ширину
result = bfs(graph, start - 1, end - 1)

# Выводим результат
if result is not None:
    print(result)
else:
    print(-1)
